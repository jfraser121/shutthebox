things to do:

    figure out how to prune the tree thing to minimise expected scores
    think about base case
    tiles remaining: 2, 3, 5
    roll: 5
            L < pick > R
            5       2, 3
remaining: 2,3     5
    L can make: 2,3,5
    R can make: 5


NEW PLAN:
want to figure out best choice at each point 
do this by calculating expected value at each point in the game
do this in simtools i think


stages:
BOARDSTATE - which tiles are still up?
AVG SCORE FOR BOARDSTATE - needs:
    SCORE FOR EACH ROLL(in prog) * PROBABILITY OF THAT ROLL(done - will just need to access in the function)

    LEGAL ROLLS - which rolls would allow you to take a turn?   is this necessary???
    

PSEUDOCODE ATTEMPT:

def optimalplay(all poss boardstates, rollprobs):
    init cache of boardstate avgscores {}
    add empty board = 0
    for board in boardstates:
        score = bestavgscore(board) - calc avg score with best play
        cache[board] = score

    return cache

def bestavgscore(board, rollprobs, cache):
    if board in cache:
        return cache[board] - (score for that board)
    else:
        avg_score_for_board = 0
        for roll, prob in rollprobs.items():                      for each roll, add board * prob to score if no legal moves,
                                                            else find score of best legal move & add that * prob to score 
            legal = getlegalmoves(board, roll)              after this is done for all rolls, board's avg score is calculated.
            if len(legal)==0:
                score += sum(board) * prob
            else:
                poss_avg_scores_for_this_roll = []
                                                            get gamestates resulting from legal moves above then 
                for gamestate in gamestates:
                    poss_scores_for_this_roll.append(bestavgscore(gamestate, rollprobs, cache))
                score += min(poss_avg_scores_for_this_roll) * prob

    return avg_score_for_board

